/* Generated By:JavaCC: Do not edit this line. MemeCompilator.java */
public class MemeCompilator implements MemeCompilatorConstants {
  public static void main(String args []) throws ParseException
  {
    MemeCompilator parser = new MemeCompilator(System.in);
 System.out.println("Escreva seu programa: ");
      try
      {
        switch (MemeCompilator.uma_linha())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MemeCompilator.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());

      }
  }

  static final public int uma_linha() throws ParseException {
    camila_filha_da_pulta();
                                  {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  static final public void camila_filha_da_pulta() throws ParseException {
    jj_consume_token(INICIOPROGRAMA);
    corpo();
    jj_consume_token(FIMPROGRAMA);
  }

  static final public void corpo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEIRO:
    case REAL:
    case BOOLEAN:
    case TEXTO:
      label_1:
      while (true) {
        declaracoes();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEIRO:
        case REAL:
        case BOOLEAN:
        case TEXTO:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      comando();
      break;
    case SE:
    case MOSTRAR:
    case IDENTIFICADOR:
      comando();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declaracoes() throws ParseException {
    tipoDado();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      declaracaoVariavel();
      break;
    case FUNCAO:
      declaracaoFuncao();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declaracaoVariavel() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FIMLINHA);
  }

  static final public void tipoDado() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEIRO:
      jj_consume_token(INTEIRO);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case TEXTO:
      jj_consume_token(TEXTO);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declaracaoFuncao() throws ParseException {
    try {
      jj_consume_token(FUNCAO);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PARENTESE_ESQUERDO);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEIRO:
        case REAL:
        case BOOLEAN:
        case TEXTO:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        tipoDado();
        jj_consume_token(IDENTIFICADOR);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGULA:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          jj_consume_token(VIRGULA);
          tipoDado();
          jj_consume_token(IDENTIFICADOR);
        }
      }
      jj_consume_token(PARENTESE_DIREITO);
      jj_consume_token(CHAVE_ESQUERDA);
      comando();
      jj_consume_token(CHAVE_DIREITA);
    } catch (Error e) {
        System.out.println("Fun\u00e7\u00e3o.");
        System.out.println(e.getMessage());
    }
  }

  static final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SE:
      condicional();
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        atribuicao();
        break;
      case PARENTESE_ESQUERDO:
        chamadaFuncao();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case MOSTRAR:
      print();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atribuicao() throws ParseException {
    try {
      jj_consume_token(ATRIBUICAO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        fim_linha();
        break;
      case CONSTANTE:
        jj_consume_token(CONSTANTE);
        fim_linha();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

/*
void loop():
{}
{
try
{
	< PARACADA > parentese_esquerdo() < IDENTIFICADOR > < DENTRO > < IDENTIFICADOR > parentese_direito() chave_esquerda() (comando()) chave_direita()
| < PARA > parentese_esquerdo() (< IDENTIFICADOR > | declaracaoVariavel()) < VIRGULA > expressao() < VIRGULA > passo() parentese_direito() chave_esquerda() (comando()) chave_direita()
}
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
}
*/
  static final public void condicional() throws ParseException {
    try {
      jj_consume_token(SE);
      parentese_esquerdo();
      expressao();
      parentese_direito();
      chave_esquerda();
      comando();
      chave_direita();
      condicionalnegada();
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void condicionalnegada() throws ParseException {
    try {
      jj_consume_token(SENAO);
      chave_esquerda();
      comando();
      chave_direita();
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void expressao() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
      comparacao();
      jj_consume_token(IDENTIFICADOR);
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void comparacao() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIOR:
        jj_consume_token(MAIOR);
        break;
      case MENOR:
        jj_consume_token(MENOR);
        break;
      case MENOR_IGUAL:
        jj_consume_token(MENOR_IGUAL);
        break;
      case MAIOR_IGUAL:
        jj_consume_token(MAIOR_IGUAL);
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      case NEGAÇÃO:
        jj_consume_token(NEGAÇÃO);
        jj_consume_token(IGUAL);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void fim_linha() throws ParseException {
    try {
      jj_consume_token(FIMLINHA);
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void chave_esquerda() throws ParseException {
    try {
      jj_consume_token(CHAVE_ESQUERDA);
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void chave_direita() throws ParseException {
    try {
      jj_consume_token(CHAVE_DIREITA);
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void parentese_esquerdo() throws ParseException {
    try {
      jj_consume_token(PARENTESE_ESQUERDO);
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void parentese_direito() throws ParseException {
    try {
      jj_consume_token(PARENTESE_DIREITO);
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void passo() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
        jj_consume_token(INC);
        break;
      case DECRE:
        jj_consume_token(DECRE);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void texto() throws ParseException {
    try {
      aspas();
      jj_consume_token(IDENTIFICADOR);
      aspas();
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void aspas() throws ParseException {
    try {
      jj_consume_token(ASPAS);
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void print() throws ParseException {
    try {
      jj_consume_token(MOSTRAR);
      parentese_esquerdo();
      texto();
      parentese_direito();
      fim_linha();
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static final public void chamadaFuncao() throws ParseException {
    try {
      parentese_esquerdo();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        jj_consume_token(IDENTIFICADOR);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGULA:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_5;
          }
          jj_consume_token(VIRGULA);
          jj_consume_token(IDENTIFICADOR);
        }
      }
      parentese_direito();
      fim_linha();
    } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MemeCompilatorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3c00000,0x3c01100,0x800,0x3c00000,0x3c00000,0x40000,0x8000,0x1100,0x0,0xfc000000,0x0,0x0,0x40000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100,0x100,0x0,0x0,0x0,0x1,0x100,0x120,0x0,0x18,0x100,0x0,};
   }

  /** Constructor with InputStream. */
  public MemeCompilator(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MemeCompilator(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MemeCompilatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MemeCompilator(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MemeCompilatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MemeCompilator(MemeCompilatorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MemeCompilatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
